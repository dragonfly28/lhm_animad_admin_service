package de.muenchen.animad.admin.administration.service.gen.domain;

import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import javax.validation.constraints.Min;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Table;	
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.ElementCollection;
import javax.persistence.OrderColumn;
import javax.persistence.CollectionTable;
import javax.persistence.JoinColumn;
import org.hibernate.search.annotations.Indexed;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.datatype.jsr310.deser.LocalDateDeserializer;
import com.fasterxml.jackson.datatype.jsr310.ser.LocalDateSerializer;
import org.hibernate.search.annotations.FieldBridge;
import org.hibernate.search.annotations.Field;
import de.muenchen.service.BaseEntity;
import de.muenchen.service.PetersPerfectBridge;
import de.muenchen.vaadin.demo.apilib.domain.Past;
import de.muenchen.auditing.MUCAudited;

/*
 * This file will be overwritten on every change of the model!
 * This file was automatically generated by GAIA.
 */
/**
 * This class represents a Zookeeper_.
 * <p>
 * Only oid and reference will be stored in the database.
 * The entity's content will be loaded according to the reference variable.
 * </p>
 */
@Entity
@Indexed
@Table(name = "Zookeeper")
public class Zookeeper_ extends BaseEntity {
	
	// ========= //
	// Variables //
	// ========= //
	
	@Column(name="name")
	@Field
	@FieldBridge(impl = PetersPerfectBridge.class)
	@NotNull
	@Size(min=2, max=30)
	private String name;
	
	
	@Column(name="employmentDate")
	@Field
	@FieldBridge(impl = PetersPerfectBridge.class)
	@JsonDeserialize(using = LocalDateDeserializer.class)
	@JsonSerialize(using = LocalDateSerializer.class)
	@NotNull
	@Past
	private java.time.LocalDate employmentDate;
	
	
	@Column(name="cando")
	@OrderColumn(name="order_index")
	@CollectionTable(name = "Zookeeper_CanDo", joinColumns = { @JoinColumn(name = "zookeeper_oid")})
	@ElementCollection
	@Enumerated(EnumType.STRING)
	@NotNull
	@Size(min = 1)
	private java.util.List<Features_> canDo = new java.util.ArrayList<>();
	
	
	@Column(name="birthday")
	@JsonDeserialize(using = LocalDateDeserializer.class)
	@JsonSerialize(using = LocalDateSerializer.class)
	@NotNull
	@Past
	private java.time.LocalDate birthday;
	
	
	@Column(name="salary")
	@NotNull
	@Min((long)0.0)
	private long salary;
	
	
	/**
	 * Default Constructor for zookeeper.
	 */
	public Zookeeper_() {}
	
	// =================== //
	// Getters and Setters //
	// =================== //
	public String getName(){
		return name;
	}
	
	public void setName(String name){
		this.name = name;
	}
	
	
	public java.time.LocalDate getEmploymentDate(){
		return employmentDate;
	}
	
	public void setEmploymentDate(java.time.LocalDate employmentDate){
		this.employmentDate = employmentDate;
	}
	
	
	public java.util.List<Features_> getCanDo(){
		return canDo;
	}
	
	public void setCanDo(java.util.List<Features_> canDo){
		this.canDo = canDo;
	}
	
	
	public java.time.LocalDate getBirthday(){
		return birthday;
	}
	
	public void setBirthday(java.time.LocalDate birthday){
		this.birthday = birthday;
	}
	
	
	public long getSalary(){
		return salary;
	}
	
	public void setSalary(long salary){
		this.salary = salary;
	}
	
	
	@Override
	public boolean equals(Object other) {
		if (other == null)
			return false;
		if (this == other)
			return true;
		if (!(other.getClass() == Zookeeper_.class))
			return false;
		if (!super.equals(other))
			return false;
		Zookeeper_ zookeeper = (Zookeeper_) other;
		if (getName() != null ? !getName().equals(zookeeper.getName()) : zookeeper.getName() != null)
			return false;
		if (getEmploymentDate() != zookeeper.getEmploymentDate())
			return false;
		if (getCanDo() != zookeeper.getCanDo())
			return false;
		if (getBirthday() != zookeeper.getBirthday())
			return false;
		if (getSalary() != zookeeper.getSalary())
			return false;
		return true;
	}

	@Override
	public int hashCode() {
		int result = super.hashCode();
		result = 31 * result + (getName() != null ? getName().hashCode() : 0);
		result = 31 * result + (getEmploymentDate() != null ? getEmploymentDate().hashCode() : 0);
		result = 31 * result + (getCanDo() != null ? getCanDo().hashCode() : 0);
		result = 31 * result + (getBirthday() != null ? getBirthday().hashCode() : 0);
		result = 31 * result + (int) (getSalary() ^ (getSalary() >>> 32));
		return result;
	}

	/**
	 * Returns a String representation for this zookeeper.
	 * The form is:
	 * <EntityName>
	 * <attribute1_Type> <attribute1_name>: <attribute1_value>
	 * <attribute2_Type> <attribute2_name>: <attribute2_value>
	 * ...
	 */
	@Override
	public String toString(){
		String s = "zookeeper";
		s += "\nString name: " + getName();
		s += "\njava.time.LocalDate employmentDate: " + getEmploymentDate();
		s += "\njava.util.List<Features_> canDo: " + getCanDo();
		s += "\njava.time.LocalDate birthday: " + getBirthday();
		s += "\nlong salary: " + getSalary();
		return s;
	}
}
