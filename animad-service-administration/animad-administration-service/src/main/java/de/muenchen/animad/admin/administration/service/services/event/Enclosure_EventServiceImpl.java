package de.muenchen.animad.admin.administration.service.services.event;

import org.springframework.stereotype.Service;

import de.muenchen.animad.admin.administration.service.gen.domain.Enclosure_;
import de.muenchen.animad.admin.administration.service.gen.services.event.Enclosure_EventService;

/*
 * This file will NOT be overwritten by GAIA.
 * This file was automatically generated by GAIA.
 */
/**
 * Provides methods to implement logic before and after Events.
 * If used as generated by GAIA this service will be autowired and called by Enclosure_EventListener.
 */
@Service
public class Enclosure_EventServiceImpl implements Enclosure_EventService{
	// If you need access to the database you can autowire a Repository.
	// Repositories are generated into the package: .gen.rest
	//
	// @Autowired
	// <EntityName>Repository repo;
	
	@Override
	public void onAfterCreate(Enclosure_ entity) {
		// Add your logic here.
	}
	@Override
	public void onBeforeCreate(Enclosure_ entity) {
		// Add your logic here.
	}
	@Override
	public void onBeforeSave(Enclosure_ entity) {
		// Add your logic here.
	}
	@Override
	public void onAfterSave(Enclosure_ entity) {
		// Add your logic here.
	}
	@Override
	public void onBeforeLinkSave(Enclosure_ parent, Object linked) {
		// Add your logic here.
	}
	@Override
	public void onAfterLinkSave(Enclosure_ parent, Object linked) {
		// Add your logic here.
	}
	@Override
	public void onBeforeLinkDelete(Enclosure_ parent, Object linked) {
		// Add your logic here.
	}
	@Override
	public void onBeforeDelete(Enclosure_ entity) {
		// Add your logic here.
	}
	@Override
	public void onAfterDelete(Enclosure_ entity) {
		// Add your logic here.
	}
	@Override
	public void onAfterLinkDelete(Enclosure_ parent, Object linked) {
		// Add your logic here.
	}
}
